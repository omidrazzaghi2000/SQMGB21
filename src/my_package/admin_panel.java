/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package my_package;

import ir.fallahpoor.jalalidatepicker.JalaliDatePicker;
import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Vector;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;

/**
 *
 * @author IP3
 */
public class admin_panel extends javax.swing.JFrame {

    /**
     * Creates new form admin_panel
     */
    String ChoosenDate = "";

    public admin_panel() {
        initComponents();
        update_table(3);/*دانشجو ها را در جدول به ادمین نمایش میدهد*/
        update_foodTable(meal_combo_box.getSelectedIndex());
        //meal_combo_box.

    }

    public void update_table(int situation) {
        /**
         * ********************
         * Connect to Database *******************
         */
        Connection conn = null;
        System.out.println("START");
        try {
            // db parameters  
            String url = "jdbc:sqlite:src\\my_package\\smane_database.db";
            // create a connection to the database  
            conn = DriverManager.getConnection(url);

            System.out.println("Connection to SQLite has been established.");
        } catch (SQLException e) {
            System.out.println(e.getMessage());
        } finally {
            try {
                if (conn != null) {
//                    ٍهمه چی اوکیه
                    String query = "SELECT * FROM Users WHERE Users.situation = " + situation;
                    try ( Statement stmt = conn.createStatement()) {
                        ResultSet rs = stmt.executeQuery(query);
                        admin_table.setModel(resultSetToTableModel(rs));

                    } catch (SQLException e) {

                    }

//                    String query = "SELECT * FROM Foods WHERE Foods.meal = " + meal;
//                    try (Statement stmt = conn.createStatement()) {
//                        ResultSet rs = stmt.executeQuery(query);
//                        adFood_table.setModel(resultSetToTableModel(rs)); 
//                        
//                    } catch (SQLException e) {
//
//                    }
                    conn.close();
                }
            } catch (SQLException ex) {
                System.out.println(ex.getMessage());

            }

        }
    }

    public static TableModel resultSetToTableModel(ResultSet rs) {
        try {
            ResultSetMetaData metaData = rs.getMetaData();
            int numberOfColumns = metaData.getColumnCount();
            Vector columnNames = new Vector();

            // Get the column names
            for (int column = 0; column < numberOfColumns; column++) {
                columnNames.addElement(metaData.getColumnLabel(column + 1));
            }

            // Get all rows.
            Vector rows = new Vector();

            while (rs.next()) {
                Vector newRow = new Vector();

                for (int i = 1; i <= numberOfColumns; i++) {
                    newRow.addElement(rs.getObject(i));
                }

                rows.addElement(newRow);
            }
            DefaultTableModel tableModel = new DefaultTableModel(rows, columnNames) {
                @Override
                public boolean isCellEditable(int row, int column) {
                    //all cells false
                    return false;
                }
            };

//            return new DefaultTableModel(rows, columnNames);
            return tableModel;

        } catch (Exception e) {
            e.printStackTrace();

            return null;
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        foodTab = new javax.swing.JTabbedPane();
        jPanel3 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        name = new javax.swing.JTextField();
        position = new javax.swing.JTextField();
        admin_table_combo_box = new javax.swing.JComboBox();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        admin_table = new javax.swing.JTable();
        password = new javax.swing.JPasswordField();
        isDormitory_cb = new javax.swing.JCheckBox();
        jPanel4 = new javax.swing.JPanel();
        add_meal_button = new javax.swing.JButton();
        remove_meal_button = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        adFood_table = new javax.swing.JTable();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        select_meal_date = new javax.swing.JButton();
        meal_combo_box = new javax.swing.JComboBox();
        food_name = new javax.swing.JTextField();
        food_price = new javax.swing.JTextField();
        loc_comboBox = new javax.swing.JComboBox();
        type_combo = new javax.swing.JComboBox<>();
        jLabel8 = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        adReport_table = new javax.swing.JTable();
        adReport_button = new javax.swing.JButton();
        date_adReport = new javax.swing.JButton();
        adReport_comboBox = new javax.swing.JComboBox();
        jLabel9 = new javax.swing.JLabel();
        adReport_getUsername = new javax.swing.JTextField();
        food_number_text = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel3.setText("ادمیـن");

        foodTab.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel2.setText("نام کاربري");

        jLabel4.setText("رمز");

        jLabel5.setText("موقعیت");

        name.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nameActionPerformed(evt);
            }
        });

        position.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                positionActionPerformed(evt);
            }
        });

        admin_table_combo_box.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "دانشجو", "توزیع کننده" }));
        admin_table_combo_box.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                admin_table_combo_boxActionPerformed(evt);
            }
        });

        jButton1.setBackground(new java.awt.Color(204, 255, 255));
        jButton1.setText("اضافه کردن");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setBackground(new java.awt.Color(255, 204, 204));
        jButton2.setText("حذف");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        admin_table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "آیدی", "نام کاربری", "رمز", "موقعیت"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(admin_table);

        password.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                passwordActionPerformed(evt);
            }
        });

        isDormitory_cb.setText("خوابگاهي");
        isDormitory_cb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                isDormitory_cbActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(39, 39, 39)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(39, 39, 39)
                                .addComponent(name, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel5))
                                .addGap(39, 39, 39)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(position, javax.swing.GroupLayout.DEFAULT_SIZE, 130, Short.MAX_VALUE)
                                    .addComponent(password)))))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(82, 82, 82)
                        .addComponent(isDormitory_cb, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(46, 46, 46)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(admin_table_combo_box, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(jPanel3Layout.createSequentialGroup()
                            .addComponent(jButton1)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton2)))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 501, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(51, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addComponent(admin_table_combo_box, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(name, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(password, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(position, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(36, 36, 36)
                        .addComponent(isDormitory_cb))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton2)
                            .addComponent(jButton1))))
                .addContainerGap(77, Short.MAX_VALUE))
        );

        foodTab.addTab("اضافه کردن کاربر", jPanel3);

        add_meal_button.setBackground(new java.awt.Color(204, 255, 255));
        add_meal_button.setText("اضافه کردن");
        add_meal_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                add_meal_buttonActionPerformed(evt);
            }
        });

        remove_meal_button.setBackground(new java.awt.Color(255, 204, 204));
        remove_meal_button.setText("حذف");
        remove_meal_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                remove_meal_buttonActionPerformed(evt);
            }
        });

        adFood_table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "نام غذا", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(adFood_table);

        jLabel6.setText("نام غذا");

        jLabel7.setText("قیمت");

        select_meal_date.setText("انتخاب تاریخ");
        select_meal_date.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                select_meal_dateActionPerformed(evt);
            }
        });

        meal_combo_box.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "انتخاب وعده", "صبحانه", "ناهار", "شام" }));
        meal_combo_box.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                meal_combo_boxActionPerformed(evt);
            }
        });

        food_name.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                food_nameActionPerformed(evt);
            }
        });

        food_price.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        food_price.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                food_priceActionPerformed(evt);
            }
        });

        loc_comboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "انتخاب سلف...", "دانشگاه", "خوابگاه" }));
        loc_comboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loc_comboBoxActionPerformed(evt);
            }
        });

        type_combo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "غذاي اول", "غذاي دوم" }));

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(80, 90, Short.MAX_VALUE)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(meal_combo_box, 0, 120, Short.MAX_VALUE)
                            .addComponent(select_meal_date, javax.swing.GroupLayout.DEFAULT_SIZE, 120, Short.MAX_VALUE)
                            .addComponent(loc_comboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(62, 62, 62))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel6)
                            .addComponent(jLabel7)
                            .addComponent(jLabel8))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(food_name, javax.swing.GroupLayout.DEFAULT_SIZE, 120, Short.MAX_VALUE)
                            .addComponent(food_price, javax.swing.GroupLayout.DEFAULT_SIZE, 120, Short.MAX_VALUE)
                            .addComponent(type_combo, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(49, 49, 49)))
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 501, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(add_meal_button)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(remove_meal_button)))
                .addGap(44, 44, 44))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addGap(60, 60, 60)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 27, Short.MAX_VALUE)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(add_meal_button)
                            .addComponent(remove_meal_button))
                        .addContainerGap(61, Short.MAX_VALUE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(select_meal_date)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(meal_combo_box, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(loc_comboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(27, 27, 27)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(food_name, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(15, 15, 15)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(food_price, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(type_combo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel8))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        foodTab.addTab("اضافه کردن غذا", jPanel4);

        adReport_table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "اسم غذا", "سلف", "تعداد"
            }
        ));
        jScrollPane3.setViewportView(adReport_table);

        adReport_button.setBackground(new java.awt.Color(204, 204, 255));
        adReport_button.setText("آپديت تعداد");
        adReport_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                adReport_buttonActionPerformed(evt);
            }
        });

        date_adReport.setText("انتخاب تاریخ");
        date_adReport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                date_adReportActionPerformed(evt);
            }
        });

        adReport_comboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "انتخاب وعده...", "صبحانه ", "ناهار", "شام" }));
        adReport_comboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                adReport_comboBoxActionPerformed(evt);
            }
        });

        jLabel9.setText("شماره دانشجویی");

        adReport_getUsername.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                adReport_getUsernameActionPerformed(evt);
            }
        });

        food_number_text.setEditable(false);
        food_number_text.setText("0");
        food_number_text.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                food_number_textActionPerformed(evt);
            }
        });

        jLabel10.setText("تعداد غذا");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel9)
                                .addGap(18, 18, 18)
                                .addComponent(adReport_getUsername, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addGap(96, 96, 96)
                                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(date_adReport, javax.swing.GroupLayout.DEFAULT_SIZE, 127, Short.MAX_VALUE)
                                    .addComponent(adReport_comboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 501, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(adReport_button)))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGap(220, 220, 220)
                        .addComponent(food_number_text, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(68, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGap(75, 75, 75)
                        .addComponent(date_adReport)
                        .addGap(18, 18, 18)
                        .addComponent(adReport_comboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(72, 72, 72)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(adReport_getUsername, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel9)))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGap(64, 64, 64)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(adReport_button)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(food_number_text, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(50, Short.MAX_VALUE))
        );

        foodTab.addTab("گزارش گیری", jPanel5);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(49, Short.MAX_VALUE)
                .addComponent(jLabel3)
                .addGap(18, 18, 18)
                .addComponent(foodTab, javax.swing.GroupLayout.PREFERRED_SIZE, 858, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(55, 55, 55))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addGap(41, 41, 41)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(foodTab)
                        .addContainerGap())))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void admin_table_combo_boxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_admin_table_combo_boxActionPerformed
        if (admin_table_combo_box.getSelectedIndex() == 0) {
            update_table(3/*دانشجو ها را در جدول به ادمین نمایش میدهد*/);
        }

        if (admin_table_combo_box.getSelectedIndex() == 1) {
            update_table(2/*توزیع کننده ها را در جدول به ادمین نمایش میدهد*/);
        }
    }//GEN-LAST:event_admin_table_combo_boxActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        Connection conn = null;
        System.out.println("START");
        try {
            // db parameters  
            String url = "jdbc:sqlite:src\\my_package\\smane_database.db";
            // create a connection to the database  
            conn = DriverManager.getConnection(url);

            System.out.println("Connection to SQLite has been established.");
        } catch (SQLException e) {
            System.out.println(e.getMessage());
        } finally {
            try {
                if (conn != null) {
//                    ٍهمه چی اوکیه
                    
                    /* آيا خوابگاهي هست يا خير */
                    int isDormitory;
                    if(isDormitory_cb.isSelected()){
                        isDormitory = 1;
                    }else {
                        isDormitory = 0;
                    }
                      
                        
                    String query = "INSERT INTO Users (username,password,situation,isDormitory) VALUES (" + name.getText() + "," + password.getText() + "," + position.getText() +","+isDormitory+ ")";

                    try ( Statement stmt = conn.createStatement()) {
                        stmt.executeUpdate(query);
                        System.out.println(Integer.parseInt(position.getText()));
                        update_table(Integer.parseInt(position.getText()));

                    } catch (SQLException e) {
                        System.out.println(e.getMessage());
                    }

                    conn.close();
                }
            } catch (SQLException ex) {
                System.out.println(ex.getMessage());

            }

        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void positionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_positionActionPerformed

    }//GEN-LAST:event_positionActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed

        Connection conn = null;
        System.out.println("START");
        try {
            // db parameters  
            String url = "jdbc:sqlite:src\\my_package\\smane_database.db";
            // create a connection to the database  
            conn = DriverManager.getConnection(url);

            System.out.println("Connection to SQLite has been established.");
        } catch (SQLException e) {
            System.out.println(e.getMessage());
        } finally {
            try {
                if (conn != null) {
//                    ٍهمه چی اوکیه
                    int rowSelected = admin_table.getSelectedRow();

                    String query = "DELETE FROM Users WHERE username = " + String.valueOf(admin_table.getValueAt(rowSelected, 0));

                    try ( Statement stmt = conn.createStatement()) {
                        stmt.executeUpdate(query);

                    } catch (SQLException e) {
                        System.out.println(e.getMessage());
                    }

                    conn.close();
                }
            } catch (SQLException ex) {
                System.out.println(ex.getMessage());

            }

        }
        ((DefaultTableModel) admin_table.getModel()).removeRow(admin_table.getSelectedRow());
    }//GEN-LAST:event_jButton2ActionPerformed

    private void nameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nameActionPerformed

    private void passwordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_passwordActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_passwordActionPerformed

    public void update_foodTable(int meal) {
        /**
         * ********************
         * Connect to Database *******************
         */
        Connection conn = null;
        System.out.println("START");
        try {
            // db parameters  
            String url = "jdbc:sqlite:src\\my_package\\smane_database.db";
            // create a connection to the database  
            conn = DriverManager.getConnection(url);

            System.out.println("Connection to SQLite has been established.");
        } catch (SQLException e) {
            System.out.println(e.getMessage());
        } finally {
            try {
                if (conn != null) {
//                    ٍهمه چی اوکیه

                    String query = "SELECT * FROM Foods WHERE meal = " + meal;
                    try ( Statement stmt = conn.createStatement()) {
                        ResultSet rs = stmt.executeQuery(query);
                        adFood_table.setModel(resultSetToTableModel(rs));

                    } catch (SQLException e) {

                    }
                    conn.close();
                }
            } catch (SQLException ex) {
                System.out.println(ex.getMessage());

            }

        }
    }

    public void update_reportTable(int meal) {
        /**
         * ********************
         * Connect to Database *******************
         */
        Connection conn = null;
        System.out.println("START");
        try {
            // db parameters  
            String url = "jdbc:sqlite:src\\my_package\\smane_database.db";
            // create a connection to the database  
            conn = DriverManager.getConnection(url);

            System.out.println("Connection to SQLite has been established.");
        } catch (SQLException e) {
            System.out.println(e.getMessage());
        } finally {
            try {
                if (conn != null) {
//                    ٍهمه چی اوکیه

                    String query = "";
                    switch (meal) {
                        case 1:
                            query = "SELECT username_id,id,reserve_date,name,type,self,price FROM (SELECT username_id,reserve_date,breakfast FROM Reserves where reserve_date=\"" + ChoosenDate + "\" and breakfast is not null) INNER JOIN Foods ON breakfast = Foods.id";
                            break;
                        case 2:
                            query = "SELECT username_id,id,reserve_date,name,type,self,price FROM (SELECT username_id,reserve_date,lunch FROM Reserves where reserve_date=\"" + ChoosenDate + "\" and lunch is not null) INNER JOIN Foods ON lunch = Foods.id";
                            break;
                        case 3:
                            query = "SELECT username_id,id,reserve_date,name,type,self,price FROM (SELECT username_id,reserve_date,dinner FROM Reserves where reserve_date=\"" + ChoosenDate + "\" and dinner is not null) INNER JOIN Foods ON dinner = Foods.id";
                            break;
                        default:
                            break;
                    }
                    if (query == "") {
                        conn.close();
                        return;
                    }
                    if((adReport_getUsername.getText().length())>0){
                        query = query + " where username_id = '" + adReport_getUsername.getText() + "'"; 
                    }
                    
                    try ( Statement stmt = conn.createStatement()) {
                        ResultSet rs = stmt.executeQuery(query);
                        adReport_table.setModel(resultSetToTableModel(rs));

                    } catch (SQLException e) {

                    }
                    conn.close();
                }
            } catch (SQLException ex) {
                System.out.println(ex.getMessage());

            }

        }
    }
    public void update_locTable(int location) {
        /**
         * ********************
         * Connect to Database *******************
         */
        Connection conn = null;
        System.out.println("START");
        try {
            // db parameters  
            String url = "jdbc:sqlite:src\\my_package\\smane_database.db";
            // create a connection to the database  
            conn = DriverManager.getConnection(url);

            System.out.println("Connection to SQLite has been established.");
        } catch (SQLException e) {
            System.out.println(e.getMessage());
        } finally {
            try {
                if (conn != null) {
//                    ٍهمه چی اوکیه

                    String query = "SELECT * FROM Foods WHERE self = " + location;
                    try ( Statement stmt = conn.createStatement()) {
                        ResultSet rs = stmt.executeQuery(query);
                        adFood_table.setModel(resultSetToTableModel(rs));

                    } catch (SQLException e) {

                    }
                    conn.close();
                }
            } catch (SQLException ex) {
                System.out.println(ex.getMessage());

            }

        }
    }
    private void date_adReportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_date_adReportActionPerformed
        SwingUtilities.invokeLater(() -> {

            JFrame frame = new JFrame();
            frame.setLayout(new BorderLayout());
            JalaliDatePicker jalaliDatePicker = new JalaliDatePicker(frame);
            jalaliDatePicker.setDatePickerDialogSize(600, 300);
            System.out.println(jalaliDatePicker.getDay());

            jalaliDatePicker.addDateChangeListener(
                    (newYear, newMonth, newDay)
                    -> {
                ChoosenDate = newYear + "." + newMonth + "." + newDay;
                System.out.println(ChoosenDate);
            });

            frame.add(jalaliDatePicker, BorderLayout.CENTER);
            JButton setDateButton = new JButton("ثبت تاريخ");
            frame.add(setDateButton, BorderLayout.SOUTH);

            frame.setSize(250, 100);
            frame.setResizable(false);
            frame.setLocationRelativeTo(null);
            frame.setVisible(true);

            setDateButton.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    frame.setVisible(false);/*بستن فريم انتخاب تاريخ*/
//                    date_label.setText(ChoosenDate);
//                    update_table();
                }
            });
        });
    }//GEN-LAST:event_date_adReportActionPerformed

    private void adReport_comboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_adReport_comboBoxActionPerformed
        if (adReport_comboBox.getSelectedIndex() == 1) {
            update_reportTable(1);/*صبحانه را در جدول به ادمین نمایش میدهد*/
        }

        if (adReport_comboBox.getSelectedIndex() == 2) {
            update_reportTable(2);/*نهار را در جدول به ادمین نمایش میدهد*/
        }

        if (adReport_comboBox.getSelectedIndex() == 3) {
            update_reportTable(3);/*شام را در جدول به ادمین نمایش میدهد*/
        }    }//GEN-LAST:event_adReport_comboBoxActionPerformed

    private void adReport_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_adReport_buttonActionPerformed
        int rowSelected = adReport_table.getSelectedRow();
        if (rowSelected == -1) {
            return;
        } else {
            /**
             * ********************
             * Connect to Database *******************
             */
            Connection conn = null;
            System.out.println("START");
            try {
                // db parameters  
                String url = "jdbc:sqlite:src\\my_package\\smane_database.db";
                // create a connection to the database  
                conn = DriverManager.getConnection(url);

                System.out.println("Connection to SQLite has been established.");
            } catch (SQLException e) {
                System.out.println(e.getMessage());
            } finally {
                try {
                    if (conn != null) {
//                    ٍهمه چی اوکیه

                        String query = "";
                        int meal = adReport_comboBox.getSelectedIndex();
                        int selectedId = Integer.parseInt(adReport_table.getValueAt(rowSelected, 1).toString());
                        int self = Integer.parseInt(adReport_table.getValueAt(rowSelected, 5).toString());
                        switch (meal) {
                        case 1:
                            query = "SELECT count(id) FROM ((SELECT username_id,reserve_date,breakfast FROM Reserves where reserve_date=\""+ChoosenDate+"\" and breakfast is not null) INNER JOIN Foods ON breakfast = Foods.id) WHERE id = "+selectedId+" and self = "+self;
                            break;
                        case 2:
                            query = "SELECT count(id) FROM ((SELECT username_id,reserve_date,lunch FROM Reserves where reserve_date=\""+ChoosenDate+"\" and lunch is not null) INNER JOIN Foods ON lunch = Foods.id) WHERE id = "+selectedId+" and self = "+self;
                            break;
                        case 3:
                            query = "SELECT count(id) FROM ((SELECT username_id,reserve_date,dinner FROM Reserves where reserve_date=\""+ChoosenDate+"\" and dinner is not null) INNER JOIN Foods ON dinner = Foods.id) WHERE id = "+selectedId+" and self = "+self;
                            break;
                        default:
                            break;
                        }
                        try ( Statement stmt = conn.createStatement()) {
                            ResultSet rs = stmt.executeQuery(query);
                           food_number_text.setText(rs.getString("count(id)"));

                        } catch (SQLException e) {

                        }
                        conn.close();
                    }
                } catch (SQLException ex) {
                    System.out.println(ex.getMessage());

                }

            }
        }

    }//GEN-LAST:event_adReport_buttonActionPerformed

    private void food_number_textActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_food_number_textActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_food_number_textActionPerformed

    private void adReport_getUsernameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_adReport_getUsernameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_adReport_getUsernameActionPerformed

    private void isDormitory_cbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_isDormitory_cbActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_isDormitory_cbActionPerformed

    private void loc_comboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loc_comboBoxActionPerformed
        if (loc_comboBox.getSelectedIndex() == 1) {
            update_locTable(1);/*دانشگاه را در جدول به ادمین نمایش میدهد*/
        }

        if (loc_comboBox.getSelectedIndex() == 2) {
            update_locTable(2);/*خوابگاه را در جدول به ادمین نمایش میدهد*/
        }
    }//GEN-LAST:event_loc_comboBoxActionPerformed

    private void food_priceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_food_priceActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_food_priceActionPerformed

    private void food_nameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_food_nameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_food_nameActionPerformed

    private void meal_combo_boxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_meal_combo_boxActionPerformed
        if (meal_combo_box.getSelectedIndex() == 1) {
            update_foodTable(1);/*صبحانه را در جدول به ادمین نمایش میدهد*/
        }

        if (meal_combo_box.getSelectedIndex() == 2) {
            update_foodTable(2);/*نهار را در جدول به ادمین نمایش میدهد*/
        }

        if (meal_combo_box.getSelectedIndex() == 3) {
            update_foodTable(3);/*شام را در جدول به ادمین نمایش میدهد*/
        }
    }//GEN-LAST:event_meal_combo_boxActionPerformed

    private void select_meal_dateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_select_meal_dateActionPerformed
        SwingUtilities.invokeLater(() -> {

            JFrame frame = new JFrame();
            frame.setLayout(new BorderLayout());
            JalaliDatePicker jalaliDatePicker = new JalaliDatePicker(frame);
            jalaliDatePicker.setDatePickerDialogSize(600, 300);
            System.out.println(jalaliDatePicker.getDay());

            jalaliDatePicker.addDateChangeListener(
                (newYear, newMonth, newDay)
                -> {
                    ChoosenDate = newYear + "." + newMonth + "." + newDay;
                    System.out.println(ChoosenDate);
                });

                frame.add(jalaliDatePicker, BorderLayout.CENTER);
                JButton setDateButton = new JButton("ثبت تاريخ");
                frame.add(setDateButton, BorderLayout.SOUTH);

                frame.setSize(250, 100);
                frame.setResizable(false);
                frame.setLocationRelativeTo(null);
                frame.setVisible(true);

                setDateButton.addActionListener(new ActionListener() {
                    @Override
                    public void actionPerformed(ActionEvent e) {
                        frame.setVisible(false);/*بستن فريم انتخاب تاريخ*/
                        //                    date_label.setText(ChoosenDate);
                        //                    update_table();
                    }
                });
            });
    }//GEN-LAST:event_select_meal_dateActionPerformed

    private void remove_meal_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_remove_meal_buttonActionPerformed
        Connection conn = null;
        System.out.println("START");
        try {
            // db parameters
            String url = "jdbc:sqlite:src\\my_package\\smane_database.db";
            // create a connection to the database
            conn = DriverManager.getConnection(url);

            System.out.println("Connection to SQLite has been established.");
        } catch (SQLException e) {
            System.out.println(e.getMessage());
        } finally {
            try {
                if (conn != null) {
                    //                    ٍهمه چی اوکیه
                    int rowSelected = adFood_table.getSelectedRow();

                    String query = "DELETE FROM Foods WHERE name = \"" + String.valueOf(adFood_table.getValueAt(rowSelected, 0)) + "\"";

                    try ( Statement stmt = conn.createStatement()) {
                        stmt.executeUpdate(query);

                    } catch (SQLException e) {
                        System.out.println(e.getMessage());
                    }

                    conn.close();
                }
            } catch (SQLException ex) {
                System.out.println(ex.getMessage());

            }

        }
        ((DefaultTableModel) adFood_table.getModel()).removeRow(adFood_table.getSelectedRow());
    }//GEN-LAST:event_remove_meal_buttonActionPerformed

    private void add_meal_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_add_meal_buttonActionPerformed
        Connection conn = null;
        System.out.println("START");
        try {
            // db parameters
            String url = "jdbc:sqlite:src\\my_package\\smane_database.db";
            // create a connection to the database
            conn = DriverManager.getConnection(url);

            System.out.println("Connection to SQLite has been established.");
        } catch (SQLException e) {
            System.out.println(e.getMessage());
        } finally {
            try {
                if (conn != null) {
                    //                    ٍهمه چی اوکیه
                    int type = type_combo.getSelectedIndex()+1;
                    String query = "INSERT INTO Foods (name,price,date,meal,self,type) VALUES (\"" + food_name.getText() + "\"," + food_price.getText() + ",\"" + ChoosenDate + "\"," + meal_combo_box.getSelectedIndex() + "," + loc_comboBox.getSelectedIndex() +","+type+ ")";

                    try ( Statement stmt = conn.createStatement()) {
                        stmt.executeUpdate(query);
                        System.out.println(meal_combo_box.getSelectedIndex());
                        update_table(meal_combo_box.getSelectedIndex());

                    } catch (SQLException e) {
                        System.out.println(e.getMessage());
                    }

                    conn.close();
                }
            } catch (SQLException ex) {
                System.out.println(ex.getMessage());

            }
            update_foodTable(meal_combo_box.getSelectedIndex());
        }
    }//GEN-LAST:event_add_meal_buttonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(admin_panel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(admin_panel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(admin_panel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(admin_panel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new admin_panel().setVisible(true);

            }
        });

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable adFood_table;
    private javax.swing.JButton adReport_button;
    private javax.swing.JComboBox adReport_comboBox;
    private javax.swing.JTextField adReport_getUsername;
    private javax.swing.JTable adReport_table;
    private javax.swing.JButton add_meal_button;
    private javax.swing.JTable admin_table;
    private javax.swing.JComboBox admin_table_combo_box;
    private javax.swing.JButton date_adReport;
    private javax.swing.JTabbedPane foodTab;
    private javax.swing.JTextField food_name;
    private javax.swing.JTextField food_number_text;
    private javax.swing.JTextField food_price;
    private javax.swing.JCheckBox isDormitory_cb;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JComboBox loc_comboBox;
    private javax.swing.JComboBox meal_combo_box;
    private javax.swing.JTextField name;
    private javax.swing.JPasswordField password;
    private javax.swing.JTextField position;
    private javax.swing.JButton remove_meal_button;
    private javax.swing.JButton select_meal_date;
    private javax.swing.JComboBox<String> type_combo;
    // End of variables declaration//GEN-END:variables
}
